"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/AI.js":
/*!*******************!*\
  !*** ./src/AI.js ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   promptWithImage: () => (/* binding */ promptWithImage)\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @swc/helpers/_/_async_to_generator */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_async_to_generator.js\");\n/* harmony import */ var _swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @swc/helpers/_/_to_consumable_array */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_to_consumable_array.js\");\n/* harmony import */ var _swc_helpers_ts_generator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @swc/helpers/_/_ts_generator */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(app-pages-browser)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _serverAI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serverAI */ \"(app-pages-browser)/./src/serverAI.js\");\n/* __next_internal_client_entry_do_not_use__ promptWithImage auto */ \n\n\n\n\nfunction promptWithImage(file, problemLabel) {\n    return _promptWithImage.apply(this, arguments);\n}\nfunction _promptWithImage() {\n    _promptWithImage = (0,_swc_helpers_async_to_generator__WEBPACK_IMPORTED_MODULE_2__._)(function(file, problemLabel) {\n        var result, filePart, APIKey, genAI, model, prompt, imageParts, generatedContent, newModel, generatedContentStream;\n        return (0,_swc_helpers_ts_generator__WEBPACK_IMPORTED_MODULE_3__.__generator)(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    console.log(\"test\");\n                    console.log(file);\n                    result = \"\";\n                    if (!(file !== undefined)) return [\n                        3,\n                        5\n                    ];\n                    return [\n                        4,\n                        (0,_serverAI__WEBPACK_IMPORTED_MODULE_1__.fileToGenerativePart)(file, \"image/png\")\n                    ];\n                case 1:\n                    filePart = _state.sent();\n                    return [\n                        4,\n                        (0,_serverAI__WEBPACK_IMPORTED_MODULE_1__.getAPIKey)()\n                    ];\n                case 2:\n                    APIKey = _state.sent();\n                    genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(APIKey);\n                    model = genAI.getGenerativeModel({\n                        model: \"gemini-1.5-flash\",\n                        systemInstruction: //\"For every every problem, solve it. For each problem, for every portion of the problem that requires math (ANY MATH AT ALL), write code to accomplish the task and run it to get your desired result. If the question requires an exact answer rather than a decimal one, use your code and result to infer the correct answer. If a portion requires reasoning rather than math, do not write code for that portion. Write detailed steps on what you did. THIS IS VERY IMPORTANT: CHECK ALL OF YOUR CALCULATIONS AGAIN AFTER YOU COMPLETE THE PROBLEM AT ALL TIMES.\",\n                        //'For every every problem state the problem label and solve it. Display all math in LATEX format. For each problem, for every portion of the problem that requires math (ANY MATH AT ALL), write code to accomplish the task and run it to get your desired result. THIS IS VERY IMPORTANT: CHECK ALL OF YOUR CALCULATIONS WITH CODE AGAIN AFTER YOU COMPLETE THE PROBLEM AT ALL TIMES. If the question requires an exact answer rather than a decimal one, use your code and result to infer the correct answer. If a portion requires reasoning rather than math, do not write code for that portion. Show your steps briefly. Include your final answer at the very bottom of your response after writing \"(final_answer)\"',\n                        //\"For every every problem, give a chain of thought and before solving it, write code to solve the problem and use it to guide you. Display all of your math in LATEX format. For each step of the problem that requires algebra (for example, if you simplify, expand, or substitute, etc), write code to accomplish the task and run it to get your desired result BEFORE moving on. If a portion requires reasoning rather than math, do not write code for that portion. THIS IS VERY IMPORTANT: CHECK ALL OF YOUR CALCULATIONS WITH CODE AGAIN AFTER YOU COMPLETE THE PROBLEM AT ALL TIMES. If your answer does not match the code''s answer, THE CODE''s ANSWER IS MORE LIKELY TO BE CORRECT, so you should recheck your work according to the code's response unless you are absolutely sure that you are correct. If the question requires an exact answer rather than a decimal one, use your code and result to infer the correct answer. Show your steps briefly. Include your final answer at the very bottom of your response. After everything, reexplain your steps in human readable format\",\n                        //\"For every every problem, give a chain of thought and before solving it, write code to solve the problem and use it to guide you. Display all of your math in LATEX format using single and double dollar sign delimiters. For each step of the problem that requires algebra (for example, if you simplify, expand, or substitute, etc), write code to accomplish the task and run it to get your desired result BEFORE moving on. If a portion requires reasoning rather than math, do not write code for that portion. THIS IS VERY IMPORTANT: CHECK ALL OF YOUR CALCULATIONS WITH CODE AGAIN AFTER YOU COMPLETE THE PROBLEM AT ALL TIMES. If your answer does not match the code's answer, THE CODE's ANSWER IS MORE LIKELY TO BE CORRECT, so you should recheck your work according to the code's response unless you are absolutely sure that you are correct. If the question requires an exact answer rather than a decimal one, use your code and result to infer the correct answer. Show your steps briefly. Include your final answer at the very bottom of your response after writing '(final_answer)' After everything, reexplain your steps in human readable format\",\n                        \"For every every problem, give a chain of thought and before solving it, write code to solve the problem and use it to guide you. Display all of your math in LATEX format in code blocks using single and double dollar sign delimiters. For each step of the problem that requires algebra (for example, if you simplify, expand, or substitute, etc), write code to accomplish the task and run it to get your desired result BEFORE moving on. If a portion requires reasoning rather than math, do not write code for that portion. THIS IS VERY IMPORTANT: CHECK ALL OF YOUR CALCULATIONS WITH CODE AGAIN AFTER YOU COMPLETE THE PROBLEM AT ALL TIMES. If your answer does not match the code's answer, THE CODE's ANSWER IS MORE LIKELY TO BE CORRECT, so you should recheck your work according to the code's response unless you are absolutely sure that you are correct. If the question requires an exact answer rather than a decimal one, use your code and result to infer the correct answer. Show your steps briefly. Include your final answer at the very bottom of your response after writing '(final_answer)'. After everything, display {explanation_start} and reexplain your steps in human readable format with formatting like new lines (step by step) as if you were just solving the problem for the first time\",\n                        tools: [\n                            {\n                                codeExecution: {}\n                            }\n                        ]\n                    });\n                    prompt = \"Solve problem \" + problemLabel;\n                    //const prompt =\n                    //\t\"Solve every problem you see here and write detailed steps on what you did. (Do not worry about length)\";\n                    imageParts = [\n                        filePart\n                    ];\n                    return [\n                        4,\n                        model.generateContent([\n                            prompt\n                        ].concat((0,_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_4__._)(imageParts)))\n                    ];\n                case 3:\n                    generatedContent = _state.sent();\n                    newModel = genAI.getGenerativeModel({\n                        model: \"gemini-1.5-flash\",\n                        systemInstruction: \"You will receive a response that includes a detailed explanation of the solution to a problem. Use this response to guide you when solving the problem. DO NOT INCLUDE THE CODE PORTION. Make sure to print a step by step response with all of the math in LATEX form with double dollar delimiters. Make sure you arrive at the same final answer as given. Do not mention anything about formatting or code in yoru response.\",\n                        tools: [\n                            {\n                                codeExecution: {}\n                            }\n                        ]\n                    });\n                    prompt = generatedContent.response.text();\n                    return [\n                        4,\n                        newModel.generateContentStream([\n                            prompt\n                        ].concat((0,_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_4__._)(imageParts)))\n                    ];\n                case 4:\n                    generatedContentStream = _state.sent();\n                    result = generatedContentStream.stream;\n                    _state.label = 5;\n                case 5:\n                    return [\n                        2,\n                        result\n                    ];\n            }\n        });\n    });\n    return _promptWithImage.apply(this, arguments);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/AI.js\n"));

/***/ })

});